%title: Economic Exchange For Everyone Else
%author: James Edwards
%date: 2018-10-26

-> Step Transactions <-


   Purchase_Stuff_From_Game_Crafter(
      'arg1',
      'arg2',
      *Steps*(
                  *one*('stuff'),
                  *two*('more stuff'),
      ),
   );
*========================================================*
Why is this important?

If *Steps* is a normal subroutine, subroutine *one* and *two*
would be excuted and *Steps* would get an array of EXPRs
[ void content, scalar, list ]

You want to control if subroutines/steps are to be excuted.

-------------------------------------------------

->  If you don't groove on the Tau Station flavored example  <-

How about this format?

my $rc = Steps(
            one('stuff'),
            two('more stuff'),
         );


-------------------------------------------------

->  My journey of queries  <-

Kept on searching
   Tried a bunch of searches then one day
     Multi Step Transaction
     Business process Transaction
       Found reference to State Machine

   Perl State Machine
     Found a StackOverflow Q. about DFA::Simple
       Found a comment by Ovid about FSA::Rules
         FSA::Rules
           Authors
             David E. Wheeler
             Curtis "Ovid" Poe

   Seems a kool place to start

-------------------------------------------------

-> Economic Exchange <-


   Purchase_Stuff_From_Game_Crafter(
      'arg1',
      'arg2',
      Steps(
                  one('stuff'),
                  two('more stuff'),
      ),
   );
*========================================================*
My last presentation on this stuff went over like a lead ballon. 
Nobody grooved on the Tau Station flavored thoughts.  
But creating a business transaction, NOT just a SQL transaction, is important. 
Lets migrate this project out of Tau Station land and into your coding world.
(In Version One, I really over thought the parsing, REGEXs and SubjectVerbObject design!!!)
   [MadMongers/04-2018-StepTransactions](https://github.com/MadMongers/04-2018-StepTransactions)
And learn about FSA::Rules in the process.

-------------------------------------------------

->  Anonymous Subroutine Will Help <-


(sub { ... })->()  # will execute the subroutine

 sub { ... },      # is a ref to a subroutine

*========================================================*
Version Two of my project wraps the FSA::Rules' 'State Machine' within
a anonymous subroutine.
     [MadMongers/10-2018-EconomicExchange](https://github.com/MadMongers/10-2018-EconomicExchange)

Version Three of my project passes around references to
anonymous subroutines which are the 'states'
     [MadMongers/11-2018-EconomicExchange](https://github.com/MadMongers/11-2018-EconomicExchange)

-------------------------------------------------

->  FSA::Rules. Example in POD  <-

  my $fsa = FSA::Rules->new(
     ping => {
         do => sub { print "ping!\n";
                     my $state = shift;
                     $state->result('pong');
                     $state->machine->{count}++;
         },
         rules =>[ game_over => sub { shift->machine->{count} >= 20 },
                   pong      => sub { shift->result eq 'pong'       },
         ],
     },
     pong => {
         do => sub { print "pong!\n" },
         rules => [ ping => 1, ], # always goes back to ping
     },
     game_over => { do => sub { say 'Game Over' } }
  );
  $fsa->start;
  $fsa->switch until $fsa->at('game_over');
*========================================================*
There is plenty more to FSA::Rules. I'm just showing the a
small portion of the stuff I used.  

-------------------------------------------------

->  Lets remember my code <-


   Purchase_Stuff_From_Game_Crafter(
      'arg1',
      'arg2',
      Steps(
             one('stuff'),
             two('more stuff'),
      ),
   );

-------------------------------------------------

->  My source code filter will... Part 1 <-

( sub {
   my $fsa = FSA::Rules->new(
   *step0* => {
      do => sub {
         my $rc = *one*('stuff');
         my $state = shift;
         $state->result($rc);
      },
   },
   *step1* => {
      do => sub {
         my $rc = *two*('more stuff');
         my $state = shift;
         $state->result($rc);
      },
   },
   ); # end of FSA::Rules->new()
   @behaviors = (undef, undef, );         # to be discussed later on!
   return STEPS($fsa, 0, 4,\@behaviors);
   } # end of anonymous sub
)->()
);

-------------------------------------------------

->  My source code filter will append to the module ... Part 2 <-

# No testing of return codes of individual steps in my initial coding

sub STEPS { ... 
   *try* {
      begin_trans();
      for my $j ($beg..$end) {
        $fsa->curr_state("step$j");
      }
      end_trans();
   }
   *catch* {
      roll_back();
      die $_; # rethrow
   };
   return 1;
}
*========================================================*
If your modules has more than one 'Steps', why insert the
logic for handling the State Machine more than once.

To pull this off, I'm searching for '1;' at the end of the module. 
So current versions (2 & 3) only works with modules.

-------------------------------------------------

->  Will Handle *Behaviors* <-


   Purchase_Some_Stuff_From_Game_Crafter(
      'arg1',
      'arg2',
      Steps(
         *ASSERT*(  func0() ),
                  func1(),
                  func2(),
         *FAILURE*( func3() ),
         *ALWAYS*(  func4() ),
      ),
   );

*========================================================*
I like Ovid's optional 'behavior' attributes. 

-------------------------------------------------

->  Behaviors <-

Stolen from Curtis 'Ovid' Poe

Posted on April 20, 2018
[Extending Economic Exchange Conditions](https://blog.taustation.space/blog/extending-economic-exchange-conditions/)

These behaviors alter the flow of steps:

*ASSERT*  – If this step fails, do not call any other steps for any reason.
*ALWAYS*  – Always run this step (unless an ASSERT was previously failed).
*FAILURE* – Run this step if any earlier step failed (unless an ASSERT was 
          previously failed).


-------------------------------------------------

->  jimE's rules  <-

We're keeping this simple

0) Works only with modules. Looks for '1;' before EOF

1) Each step defined on a single line in the original source.
    (probably have to change PerlTidy for 80+ character lines)

2) The Behavior ASSERTions are on the top.

3) You'll have to import subroutines from other modules

4) If an exception is caught (Try::Tiny), just gonna rethrow it!
     die $_; # rethrow
     Note: JT Smith's Ouch.pm is kool for creating exceptions.

5) In my sample code, individual *steps* will *NOT* be constructors (Ovid land)

6) Your project needs to create it's own begin, end and rollback transaction subroutines.

7) Subroutines used in a step return FALSE for bad, else everything is TRUE.

-------------------------------------------------

->  Disclaimers  <-


9) FSA::Rules does NOT have 'import' methods so I did NOT create
   one use/include package. (i.e. Modern::Perl)

1) 'Steps' should be the last argument of a subroutine call.
   I haven't tested if it is not.


-------------------------------------------------

->  The Source Filter Will ...  <-


Handle this format of a procedure like call

my $rc = Steps(
            one('stuff'),
            two('more stuff'),
         );

*========================================================*
The assignment statement before the 'Steps(' trips the flag.

-------------------------------------------------

->  Use Template(s) For Your Coding  <-


Otherwise your amount of chanting will increase.

AND

You will be spending time in the debugger to see what the source filter created.


ex: 
    perl -d  run.pl
    f lib/PurchaseClones.pm
    |  l 1-400

*========================================================*
Source code has a 'templates' directory.

-------------------------------------------------

->  Post Mortem  <-


For what I used of FSA::Rules, it did not give a great advantage. 
I would go back to passing Array of Arrays and use anonymous subroutines.

my @stepz = (
        [ 'ASSERT', (sub { ... }), ],
        ...
       );

New version's complete code will be on the MadMongers' github page
     [MadMongers/11-2018-EconomicExchange](https://github.com/MadMongers/11-2018-EconomicExchange)

-------------------------------------------------

->  Anonymous Subroutines Revisited   <-

Purchase_Stuff_From_Game_Crafter( 
      'arg1',
      'arg2', 
      Steps(
            ALWAYS( one('stuff')),  # overkill, but I want to show filter output
      ),
);

*Turns into*

Purchase_Stuff_From_Game_Crafter( 
      'arg1',
      'arg2', 
      STEPS (
        [ 'ALWAYS', (sub { one('stuff') }), ],
      ),
);

*========================================================*
My 'STEPS' subroutine will be appended to the *End Of Module*.

-------------------------------------------------

->  Ovid's Communications on the topic (if you choose to drink the Kool-Aid)  <-


Posted on December 15, 2016 [The Tau Station Universe: Software](https://blog.taustation.space/blog/the-tau-station-universe-software/)

Posted on April 20, 2017    [On writing clean code](https://blog.taustation.space/blog/on-writing-clean-code/)

Posted on June 13, 2017     [Writing Declarative Perl](http://blogs.perl.org/users/ovid/2017/06/writing-declarative-perl.html)

Posted on February 8, 2018  [On writing clean code … for combat](https://blog.taustation.space/blog/on-writing-clean-code-for-combat/)

Posted on April 20, 2018    [Extending Economic Exchange Conditions](https://blog.taustation.space/blog/extending-economic-exchange-conditions/)

[Modeling a Universe in Perl](http://www.perlconference.us/tpc-2017-dc/talks/#modeling_a_universe_in_perl)
[Video](https://www.youtube.com/watch?v=UmLwYLSmTSs)

-------------------------------------------------

-> A 'Modeling a Universe' update.


At the Swiss Perl WorkShop 2018, Mr. Poe presentation:

1) Did not mention Behaviors

2) He said Tau Station does not do any logging

   BUT

   Any Economic Exchange that fails, creates a 'Error Report' of the entire 'Steps' call
   with fields filled in instead of variable names.
      [ Day 1, 41st minute ]

   I'll leave that for another day. 

   Maybe thats why Tau Station uses constructors for individual steps.
   Pass back an object with lots of stuff.

-------------------------------------------------

-> *The End.  <-

Questions?  Questions?  Questions?  Questions?  Questions?
  Questions?  Questions?  Questions?  Questions?  Questions?
    Questions?  Questions?  Questions?  Questions?  Questions?
      Questions?  Questions?  Questions?  Questions?  Questions?
        Questions?  Questions?  Questions?  Questions?  Questions?
          Questions?  Questions?  Questions?  Questions?  Questions?
            Questions?  Questions?  Questions?  Questions?  Questions?  
              Questions?  Questions?  Questions?  Questions?  Questions?  
                Questions?  Questions?  Questions?  Questions?  Questions?  
                  Questions?  Questions?  Questions?  Questions?  Questions?  
                    Questions?  Questions?  Questions?  Questions?  Questions?  
                      Questions?  Questions?  Questions?  Questions?  Questions?




"My BlockChain can beat your BlockChain." Ed Bott, ZDNet

Modules used
  Moo                 # for test program's method calls
  Try::Tiny           # can be easily be replaced
  FSA::Rules          # only needed for Version 2
  Filter::Util::Call
